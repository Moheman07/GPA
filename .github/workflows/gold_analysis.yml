name: 🤖 AI-Ready Gold Analysis for n8n
on:
  schedule:
    - cron: '30 13 * * 1-5'  # يومي
  workflow_dispatch:

env:
  NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
  PYTHONUNBUFFERED: 1

jobs:
  ai-gold-analysis:
    name: 🤖 AI Gold Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: 📦 Install Core Packages
      run: |
        pip install --quiet yfinance pandas numpy requests vaderSentiment

    - name: 🤖 Create AI-Ready Gold Analyzer
      run: |
        cat > ai_gold_analyzer.py << 'EOF'
        """
        🤖 AI-Ready Gold Analysis for n8n Integration
        Simple, Clean, API-Friendly Output
        """
        
        import yfinance as yf
        import pandas as pd
        import numpy as np
        import requests
        import json
        import os
        from datetime import datetime, timedelta
        import warnings
        
        warnings.filterwarnings('ignore')
        
        try:
            from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
            sentiment_analyzer = SentimentIntensityAnalyzer()
            SENTIMENT_AVAILABLE = True
        except:
            SENTIMENT_AVAILABLE = False
        
        def safe_float(value, default=0.0):
            """Safely convert to float"""
            try:
                if pd.isna(value):
                    return default
                if hasattr(value, 'iloc'):
                    value = value.iloc[0] if len(value) > 0 else default
                return float(value)
            except:
                return default
        
        def fetch_gold_data():
            """Fetch gold market data - simplified"""
            try:
                print("📊 Fetching gold data...")
                
                # Simple approach - just GLD ETF
                data = yf.download('GLD', period='6mo', interval='1d', progress=False)
                
                if data.empty:
                    print("⚠️ GLD failed, trying GC=F...")
                    data = yf.download('GC=F', period='6mo', progress=False)
                
                if data.empty:
                    raise Exception("Failed to fetch gold data")
                
                print(f"✅ Fetched {len(data)} days of data")
                return data
                
            except Exception as e:
                print(f"❌ Data fetch error: {e}")
                return None
        
        def calculate_technical_analysis(data):
            """Calculate technical indicators - FIXED"""
            try:
                print("📈 Calculating technical indicators...")
                
                df = data.copy()
                
                # Basic indicators with safe calculations
                df['SMA_20'] = df['Close'].rolling(20, min_periods=1).mean()
                df['SMA_50'] = df['Close'].rolling(50, min_periods=1).mean()
                df['EMA_12'] = df['Close'].ewm(span=12).mean()
                df['EMA_26'] = df['Close'].ewm(span=26).mean()
                
                # RSI - safe calculation
                delta = df['Close'].diff()
                gain = delta.where(delta > 0, 0).rolling(14, min_periods=1).mean()
                loss = (-delta.where(delta < 0, 0)).rolling(14, min_periods=1).mean()
                rs = gain / loss.replace(0, np.inf)
                df['RSI'] = 100 - (100 / (1 + rs))
                
                # MACD
                df['MACD'] = df['EMA_12'] - df['EMA_26']
                df['MACD_Signal'] = df['MACD'].ewm(span=9).mean()
                
                # Get latest values safely
                latest = df.iloc[-1]
                previous = df.iloc[-2] if len(df) >= 2 else latest
                
                # SAFE VALUE EXTRACTION
                current_price = safe_float(latest['Close'])
                previous_price = safe_float(previous['Close'])
                
                if current_price == 0:
                    raise Exception("Invalid current price")
                
                # Calculate changes
                change_1d = ((current_price - previous_price) / previous_price * 100) if previous_price > 0 else 0
                
                # Technical indicators
                rsi = safe_float(latest['RSI'], 50)
                sma_20 = safe_float(latest['SMA_20'])
                sma_50 = safe_float(latest['SMA_50'])
                macd = safe_float(latest['MACD'])
                macd_signal = safe_float(latest['MACD_Signal'])
                
                # Trend analysis
                trend_short = "bullish" if current_price > sma_20 else "bearish"
                trend_medium = "bullish" if current_price > sma_50 else "bearish"
                macd_trend = "bullish" if macd > macd_signal else "bearish"
                
                # Technical score calculation
                tech_score = 0
                if current_price > sma_50: tech_score += 2
                if current_price > sma_20: tech_score += 1
                if 30 <= rsi <= 70: tech_score += 1
                if macd > macd_signal: tech_score += 1
                
                # Normalize to -1 to +1
                technical_score = (tech_score / 5) * 2 - 1
                
                return {
                    "status": "success",
                    "current_price": round(current_price, 2),
                    "price_change_24h": round(change_1d, 2),
                    "rsi_14": round(rsi, 1),
                    "sma_20": round(sma_20, 2),
                    "sma_50": round(sma_50, 2),
                    "macd": round(macd, 4),
                    "macd_signal": round(macd_signal, 4),
                    "trend_short_term": trend_short,
                    "trend_medium_term": trend_medium,
                    "macd_trend": macd_trend,
                    "technical_score": round(technical_score, 3),
                    "data_points": len(df)
                }
                
            except Exception as e:
                print(f"❌ Technical analysis error: {e}")
                return {"status": "error", "error": str(e)}
        
        def analyze_news_sentiment():
            """Analyze news sentiment - simplified for AI"""
            api_key = os.getenv('NEWS_API_KEY')
            
            if not api_key or not SENTIMENT_AVAILABLE:
                return {
                    "status": "disabled",
                    "sentiment_score": 0,
                    "articles_count": 0,
                    "summary": "News analysis disabled"
                }
            
            try:
                print("📰 Analyzing news sentiment...")
                
                # Fetch recent gold news
                url = f"https://newsapi.org/v2/everything?q=gold+price+OR+precious+metals&language=en&sortBy=publishedAt&pageSize=30&from={datetime.now() - timedelta(days=2):%Y-%m-%d}&apiKey={api_key}"
                
                response = requests.get(url, timeout=10)
                if response.status_code != 200:
                    raise Exception(f"API error: {response.status_code}")
                
                articles = response.json().get('articles', [])
                
                if not articles:
                    return {
                        "status": "no_articles",
                        "sentiment_score": 0,
                        "articles_count": 0,
                        "summary": "No recent articles found"
                    }
                
                # Analyze sentiment
                sentiments = []
                relevant_articles = []
                
                gold_keywords = ['gold', 'bullion', 'precious', 'xau']
                
                for article in articles[:20]:
                    title = article.get('title', '').lower()
                    description = article.get('description', '').lower()
                    content = f"{title} {description}"
                    
                    # Check relevance
                    if not any(keyword in content for keyword in gold_keywords):
                        continue
                    
                    # Analyze sentiment
                    scores = sentiment_analyzer.polarity_scores(f"{title} {description}")
                    sentiment_score = scores['compound']
                    
                    sentiments.append(sentiment_score)
                    relevant_articles.append({
                        "title": article.get('title', '')[:100],
                        "source": article.get('source', {}).get('name', 'Unknown'),
                        "sentiment": round(sentiment_score, 3)
                    })
                
                if not sentiments:
                    return {
                        "status": "no_relevant",
                        "sentiment_score": 0,
                        "articles_count": 0,
                        "summary": "No relevant articles found"
                    }
                
                # Calculate overall sentiment
                overall_sentiment = np.mean(sentiments)
                positive_count = len([s for s in sentiments if s > 0.1])
                negative_count = len([s for s in sentiments if s < -0.1])
                
                return {
                    "status": "success",
                    "sentiment_score": round(overall_sentiment, 4),
                    "articles_count": len(relevant_articles),
                    "positive_articles": positive_count,
                    "negative_articles": negative_count,
                    "neutral_articles": len(relevant_articles) - positive_count - negative_count,
                    "top_headlines": relevant_articles[:5],
                    "summary": f"Analyzed {len(relevant_articles)} articles, {positive_count} positive, {negative_count} negative"
                }
                
            except Exception as e:
                print(f"❌ News analysis error: {e}")
                return {
                    "status": "error",
                    "sentiment_score": 0,
                    "articles_count": 0,
                    "summary": f"Error: {str(e)}"
                }
        
        def generate_ai_ready_signal(technical, news):
            """Generate AI-ready trading signal"""
            try:
                # Component scores
                tech_score = technical.get('technical_score', 0)
                news_score = news.get('sentiment_score', 0) if news.get('status') == 'success' else 0
                
                # Weighted combination (70% technical, 30% news)
                total_score = (tech_score * 0.7) + (news_score * 0.3)
                
                # Signal classification
                if total_score >= 0.5:
                    signal = "STRONG_BUY"
                    action = "buy"
                elif total_score >= 0.2:
                    signal = "BUY"
                    action = "buy"
                elif total_score >= -0.2:
                    signal = "HOLD"
                    action = "hold"
                elif total_score >= -0.5:
                    signal = "SELL"
                    action = "sell"
                else:
                    signal = "STRONG_SELL"
                    action = "sell"
                
                # Confidence calculation
                confidence = min(abs(total_score) * 100, 100)
                
                # Risk level
                if confidence >= 80:
                    risk_level = "LOW"
                elif confidence >= 60:
                    risk_level = "MEDIUM"
                else:
                    risk_level = "HIGH"
                
                return {
                    "signal": signal,
                    "action": action,
                    "total_score": round(total_score, 4),
                    "confidence_percent": round(confidence, 1),
                    "risk_level": risk_level,
                    "technical_contribution": round(tech_score * 0.7, 4),
                    "news_contribution": round(news_score * 0.3, 4)
                }
                
            except Exception as e:
                print(f"❌ Signal generation error: {e}")
                return {
                    "signal": "HOLD",
                    "action": "hold",
                    "total_score": 0,
                    "confidence_percent": 0,
                    "risk_level": "HIGH"
                }
        
        def main():
            """Main execution for AI integration"""
            print("🤖 AI-Ready Gold Analysis Starting...")
            print("=" * 50)
            
            start_time = datetime.utcnow()
            
            # Step 1: Fetch data
            gold_data = fetch_gold_data()
            if gold_data is None:
                result = {
                    "status": "error",
                    "error": "Failed to fetch market data",
                    "timestamp": start_time.isoformat(),
                    "execution_time_ms": 0
                }
            else:
                # Step 2: Technical analysis
                technical = calculate_technical_analysis(gold_data)
                
                if technical.get('status') != 'success':
                    result = {
                        "status": "error",
                        "error": "Technical analysis failed",
                        "timestamp": start_time.isoformat(),
                        "execution_time_ms": 0
                    }
                else:
                    # Step 3: News analysis
                    news = analyze_news_sentiment()
                    
                    # Step 4: Generate signal
                    signal = generate_ai_ready_signal(technical, news)
                    
                    # Step 5: Compile AI-ready result
                    execution_time = int((datetime.utcnow() - start_time).total_seconds() * 1000)
                    
                    result = {
                        "status": "success",
                        "timestamp": start_time.isoformat(),
                        "execution_time_ms": execution_time,
                        
                        # AI-Ready Core Data
                        "signal": signal["signal"],
                        "action": signal["action"], 
                        "confidence": signal["confidence_percent"],
                        "risk_level": signal["risk_level"],
                        "total_score": signal["total_score"],
                        
                        # Market Data
                        "gold_price": technical["current_price"],
                        "price_change_24h": technical["price_change_24h"],
                        "trend": technical["trend_medium_term"],
                        
                        # Key Indicators
                        "rsi": technical["rsi_14"],
                        "macd_trend": technical["macd_trend"],
                        
                        # News Summary
                        "news_sentiment": news.get("sentiment_score", 0),
                        "news_articles": news.get("articles_count", 0),
                        "news_summary": news.get("summary", "Not available"),
                        
                        # Component Breakdown
                        "technical_score": technical["technical_score"],
                        "technical_contribution": signal["technical_contribution"],
                        "news_contribution": signal["news_contribution"],
                        
                        # AI Integration Helpers
                        "bullish": signal["action"] == "buy",
                        "bearish": signal["action"] == "sell", 
                        "neutral": signal["action"] == "hold",
                        "high_confidence": signal["confidence_percent"] >= 70,
                        "low_risk": signal["risk_level"] == "LOW",
                        
                        # Data Quality
                        "data_points": technical.get("data_points", 0),
                        "analysis_version": "ai_ready_v1.0"
                    }
            
            # Save results
            with open('ai_gold_analysis.json', 'w') as f:
                json.dump(result, f, indent=2)
            
            # Display summary
            print(f"\n🎯 AI-READY RESULTS")
            print(f"Status: {result['status']}")
            
            if result['status'] == 'success':
                print(f"Signal: {result['signal']}")
                print(f"Action: {result['action'].upper()}")
                print(f"Confidence: {result['confidence']:.1f}%")
                print(f"Gold Price: ${result['gold_price']:,.2f}")
                print(f"24h Change: {result['price_change_24h']:+.2f}%")
                print(f"Trend: {result['trend'].title()}")
                print(f"News Articles: {result['news_articles']}")
                print(f"Execution: {result['execution_time_ms']}ms")
                print(f"\n✅ AI-ready analysis complete!")
            else:
                print(f"Error: {result.get('error', 'Unknown')}")
            
            return 0 if result['status'] == 'success' else 1
        
        if __name__ == "__main__":
            exit(main())
        EOF

    - name: 🤖 Execute AI-Ready Analysis
      id: analysis
      run: |
        echo "🤖 Starting AI-Ready Gold Analysis for n8n..."
        python ai_gold_analyzer.py
        echo "analysis_status=success" >> $GITHUB_OUTPUT

    - name: 📊 Display AI Results
      if: steps.analysis.outputs.analysis_status == 'success'
      run: |
        if [ -f "ai_gold_analysis.json" ]; then
          echo "🤖 AI-Ready Analysis Results:"
          echo "================================"
          
          python -c "
        import json
        
        with open('ai_gold_analysis.json', 'r') as f:
            data = json.load(f)
        
        if data['status'] == 'success':
            print(f'🎯 Signal: {data[\"signal\"]}')
            print(f'🤖 Action: {data[\"action\"].upper()}')
            print(f'📊 Confidence: {data[\"confidence\"]}%')
            print(f'💰 Gold: \${data[\"gold_price\"]:,.2f} ({data[\"price_change_24h\"]:+.2f}%)')
            print(f'📈 Trend: {data[\"trend\"].title()}')
            print(f'📰 News: {data[\"news_articles\"]} articles')
            print(f'⚡ Speed: {data[\"execution_time_ms\"]}ms')
            print(f'')
            print(f'🤖 AI Flags:')
            print(f'  Bullish: {data[\"bullish\"]}')
            print(f'  Bearish: {data[\"bearish\"]}') 
            print(f'  High Confidence: {data[\"high_confidence\"]}')
            print(f'  Low Risk: {data[\"low_risk\"]}')
        else:
            print(f'❌ Error: {data.get(\"error\", \"Unknown\")}')
          "
          
          echo ""
          echo "📁 AI-Ready JSON generated: ai_gold_analysis.json"
        else
          echo "❌ No results file found"
        fi

    - name: 📝 Generate Simple README
      if: steps.analysis.outputs.analysis_status == 'success'
      run: |
        python -c "
        import json
        from datetime import datetime
        
        with open('ai_gold_analysis.json', 'r') as f:
            data = json.load(f)
        
        readme = f'''# 🤖 AI-Ready Gold Analysis
        
        **For n8n Integration & AI Processing**
        
        ## 🎯 Current Signal
        
        - **Signal:** {data.get('signal', 'N/A')}
        - **Action:** {data.get('action', 'hold').upper()}
        - **Confidence:** {data.get('confidence', 0)}%
        - **Risk Level:** {data.get('risk_level', 'MEDIUM')}
        
        ## 💰 Market Data
        
        - **Gold Price:** \${data.get('gold_price', 0):,.2f}
        - **24h Change:** {data.get('price_change_24h', 0):+.2f}%
        - **Trend:** {data.get('trend', 'neutral').title()}
        - **RSI:** {data.get('rsi', 0):.1f}
        
        ## 📰 News Analysis
        
        - **Articles:** {data.get('news_articles', 0)}
        - **Sentiment:** {data.get('news_sentiment', 0):+.4f}
        - **Summary:** {data.get('news_summary', 'N/A')}
        
        ## 🤖 AI Integration Flags
        
        ```json
        {{
          \"bullish\": {str(data.get('bullish', False)).lower()},
          \"bearish\": {str(data.get('bearish', False)).lower()},
          \"neutral\": {str(data.get('neutral', True)).lower()},
          \"high_confidence\": {str(data.get('high_confidence', False)).lower()},
          \"low_risk\": {str(data.get('low_risk', False)).lower()}
        }}
        ```
        
        ## 📊 Component Scores
        
        - **Technical:** {data.get('technical_score', 0):+.3f}
        - **Technical Contribution:** {data.get('technical_contribution', 0):+.4f} (70%)
        - **News Contribution:** {data.get('news_contribution', 0):+.4f} (30%)
        - **Total Score:** {data.get('total_score', 0):+.4f}
        
        ---
        
        **Last Updated:** {datetime.fromisoformat(data.get('timestamp', datetime.now().isoformat()).replace('Z', '+00:00')).strftime('%Y-%m-%d %H:%M:%S UTC')}  
        **Execution Time:** {data.get('execution_time_ms', 0)}ms  
        **Status:** {data.get('status', 'unknown').upper()}  
        **Version:** {data.get('analysis_version', 'v1.0')}
        
        > 🤖 **Optimized for AI & n8n Integration**
        > Clean JSON structure, boolean flags, and standardized output format.
        '''
        
        with open('README.md', 'w') as f:
            f.write(readme)
        
        print('✅ Simple README generated')
        "

    - name: 💾 Commit AI-Ready Results
      if: steps.analysis.outputs.analysis_status == 'success'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "🤖 AI Gold Analysis"
        
        git add ai_gold_analysis.json README.md
        
        if git diff --staged --quiet; then
          echo "⚠️ No changes to commit"
        else
          SIGNAL=$(python -c "import json; print(json.load(open('ai_gold_analysis.json'))['signal'])" 2>/dev/null || echo 'UPDATE')
          PRICE=$(python -c "import json; print(f\"\${json.load(open('ai_gold_analysis.json'))['gold_price']:,.0f}\")" 2>/dev/null || echo '\$0')
          
          git commit -m "🤖 AI Gold: $SIGNAL @ $PRICE - $(date -u '+%m/%d %H:%M')"
          git push
          echo "✅ AI-ready results pushed"
        fi

    - name: 📤 Upload AI-Ready Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ai-gold-analysis
        path: ai_gold_analysis.json
        retention-days: 30

    - name: 🎉 AI Success Summary
      if: success()
      run: |
        echo "🤖 AI-READY GOLD ANALYSIS COMPLETE!"
        echo "===================================="
        
        cat ai_gold_analysis.json | python -m json.tool | head -30
        
        echo ""
        echo "🔗 n8n Integration Ready!"
        echo "📁 File: ai_gold_analysis.json"
        echo "🚀 Clean JSON structure with AI flags"
        echo "⚡ Fast execution for automation"