name: Enhanced Gold Analysis V3.0

on:
  schedule:
    # Run every 4 hours on weekdays during active market hours
    - cron: '0 6,10,14,18,22 * * 1-5'
    # Run twice daily on weekends
    - cron: '0 12 * * 0,6'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      analysis_type:
        description: 'Analysis Type'
        required: false
        default: 'full'
        type: choice
        options:
        - full
        - quick
        - ml_only
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean

env:
  PYTHONPATH: ${{ github.workspace }}
  TZ: 'UTC'

jobs:
  gold-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install Dependencies
      run: |
        echo "Updating pip and tools..."
        python -m pip install --upgrade pip setuptools wheel
        
        echo "Installing required libraries..."
        pip install -r requirements.txt --timeout 300 --retries 3
        
        echo "Installed libraries:"
        pip list | grep -E "(yfinance|pandas|numpy|scikit|xgboost)" || echo "Core libraries check completed"
    
    - name: Environment Check
      run: |
        echo "Timezone: $(date)"
        echo "Python version: $(python --version)"
        echo "Disk space: $(df -h . | tail -1)"
        echo "Memory: $(free -h | head -2)"
        echo "Available Python files:"
        ls -la *.py 2>/dev/null || echo "No Python files found in root"
    
    - name: Run Gold Analysis
      env:
        NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
        FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
        ANALYSIS_TYPE: ${{ github.event.inputs.analysis_type || 'full' }}
        DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}
      run: |
        echo "Analysis type: $ANALYSIS_TYPE"
        echo "Debug mode: $DEBUG_MODE"
        
        # Try to run available scripts in order of preference
        if [ -f "simple_gold_analyzer.py" ]; then
          echo "Running simple_gold_analyzer.py"
          python simple_gold_analyzer.py
        elif [ -f "enhanced_gold_analyzer_github.py" ]; then
          echo "Running enhanced_gold_analyzer_github.py"
          python enhanced_gold_analyzer_github.py
        elif [ -f "gold_analyzer.py" ]; then
          echo "Running gold_analyzer.py"
          python gold_analyzer.py
        else
          echo "No analysis script found, creating emergency analyzer"
          python3 -c "
import yfinance as yf
import json
from datetime import datetime

try:
    print('Fetching gold data...')
    data = yf.download('GC=F', period='5d', progress=False)
    if not data.empty:
        price = float(data['Close'].iloc[-1])
        prev_price = float(data['Close'].iloc[-2])
        change_pct = ((price - prev_price) / prev_price) * 100
        
        result = {
            'timestamp': datetime.now().isoformat(),
            'price': round(price, 2),
            'change_pct': round(change_pct, 2),
            'signal': 'Buy' if change_pct > 1 else 'Sell' if change_pct < -1 else 'Hold',
            'status': 'success'
        }
        
        with open('gold_analysis_v3.json', 'w') as f:
            json.dump(result, f, indent=2)
        
        print(f'Gold Price: ${price:.2f}')
        print(f'Change: {change_pct:.2f}%')
        print(f'Signal: {result[\"signal\"]}')
    else:
        raise Exception('No data received')
except Exception as e:
    print(f'Error: {e}')
    with open('gold_analysis_v3.json', 'w') as f:
        json.dump({'error': str(e), 'timestamp': datetime.now().isoformat()}, f)
"
        fi
        
        echo "Analysis completed successfully"
    
    - name: Process Results
      if: always()
      run: |
        echo "Available result files:"
        ls -la *.json *.txt 2>/dev/null || echo "No result files found"
        
        # Show summary if available
        if ls gold_*.json 1> /dev/null 2>&1; then
          echo "Analysis summary:"
          cat gold_*.json | head -10
        fi
    
    - name: Upload Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gold-analysis-results-${{ github.run_number }}
        path: |
          *.json
          *.txt
          *.pkl
          *.db
        retention-days: 30
        if-no-files-found: warn
    
    - name: Create Analysis Report
      if: success()
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          try {
            // Find the analysis result file
            const files = fs.readdirSync('.');
            const resultFile = files.find(f => f.startsWith('gold_') && f.endsWith('.json'));
            
            if (resultFile) {
              const result = JSON.parse(fs.readFileSync(resultFile, 'utf8'));
              
              let issueBody = `## Gold Analysis Report\n\n`;
              issueBody += `**Time:** ${new Date().toISOString()}\n`;
              issueBody += `**Run:** #${context.runNumber}\n\n`;
              
              if (result.price) {
                issueBody += `### Results\n`;
                issueBody += `- **Price:** $${result.price}\n`;
                issueBody += `- **Change:** ${result.change_pct}%\n`;
                issueBody += `- **Signal:** ${result.signal}\n\n`;
              } else if (result.error) {
                issueBody += `### Error\n${result.error}\n\n`;
              }
              
              issueBody += `[Download Full Results](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`;
              issueBody += `\n---\n*Generated by Enhanced Gold Analyzer V3.0*`;
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Gold Analysis - ${new Date().toISOString().split('T')[0]}`,
                body: issueBody,
                labels: ['gold-analysis', 'automated']
              });
              
              console.log('Issue created successfully');
            }
          } catch (error) {
            console.log('Error creating issue:', error.message);
          }
    
    - name: Cleanup
      if: always()
      run: |
        # Clean temporary files
        find . -name "*.pyc" -delete 2>/dev/null || true
        find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        echo "Cleanup completed"
        retention-days: 30
        if-no-files-found: warn
    
    - name: 📢 إنشاء Issue مع التقرير المفصل
      if: success()
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            // البحث عن ملفات التقرير
            const files = fs.readdirSync('.');
            const summaryFile = files.find(f => f.startsWith('gold_summary_') && f.endsWith('.json'));
            const analysisFile = files.find(f => f.startsWith('gold_analysis_v3_') && f.endsWith('.json'));
            
            let issueBody = `## 🏆 تقرير التحليل الاحترافي للذهب V3.0\n\n`;
            issueBody += `**⏰ وقت التحليل:** ${new Date().toISOString()}\n`;
            issueBody += `**🔄 رقم التشغيل:** #${context.runNumber}\n`;
            issueBody += `**⚙️ نوع التحليل:** ${process.env.ANALYSIS_TYPE || 'full'}\n\n`;
            
            // إضافة الملخص السريع
            if (summaryFile) {
              try {
                const summary = JSON.parse(fs.readFileSync(summaryFile, 'utf8'));
                issueBody += `### 📊 الملخص السريع\n\n`;
                issueBody += `- **الإشارة:** ${summary.signal || 'N/A'}\n`;
                issueBody += `- **الثقة:** ${summary.confidence || 'N/A'}\n`;
                issueBody += `- **السعر:** $${summary.price || 'N/A'}\n`;
                issueBody += `- **التوصية:** ${summary.recommendation || 'N/A'}\n\n`;
              } catch (e) {
                console.log('خطأ في قراءة الملخص:', e.message);
              }
            }
            
            // إضافة رابط للنتائج الكاملة
            issueBody += `### 📁 النتائج الكاملة\n\n`;
            issueBody += `🔗 [تحميل جميع النتائج](${context.payload.repository.html_url}/actions/runs/${context.runId})\n\n`;
            
            // إضافة تفاصيل تقنية
            issueBody += `### 🔧 تفاصيل تقنية\n\n`;
            issueBody += `- **المكتبات:** yfinance, scikit-learn, xgboost\n`;
            issueBody += `- **الميزات:** تعلم آلي, تحليل متعدد الأطر, تحليل أخبار\n`;
            issueBody += `- **البيئة:** GitHub Actions Ubuntu Latest\n\n`;
            
            // تحديد التسميات
            const labels = ['gold-analysis', 'automated'];
            if (summaryFile) {
              const summary = JSON.parse(fs.readFileSync(summaryFile, 'utf8'));
              if (summary.signal && summary.signal.includes('Buy')) {
                labels.push('bullish');
              } else if (summary.signal && summary.signal.includes('Sell')) {
                labels.push('bearish');
              }
            }
            
            issueBody += `---\n*🤖 تم إنشاؤه تلقائياً بواسطة Enhanced Gold Analyzer V3.0*`;
            
            // إنشاء Issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📊 تحليل الذهب V3.0 - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: labels
            });
            
            console.log('✅ تم إنشاء Issue بنجاح');
            
          } catch (error) {
            console.log('⚠️ خطأ في إنشاء Issue:', error.message);
            
            // إنشاء issue مبسط في حالة الخطأ
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `⚠️ تحليل الذهب - ${new Date().toISOString().split('T')[0]}`,
              body: `## تحليل الذهب الاحترافي\n\n❌ حدث خطأ في معالجة النتائج\n\n**الخطأ:** ${error.message}\n\n🔗 [عرض السجلات](${context.payload.repository.html_url}/actions/runs/${context.runId})`,
              labels: ['gold-analysis', 'error']
            });
          }
    
    - name: 🧹 تنظيف الملفات المؤقتة
      if: always()
      run: |
        # الاحتفاظ بالملفات المهمة فقط
        find . -name "*.pyc" -delete 2>/dev/null || true
        find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        
        echo "🧹 تم التنظيف"
