name: 🏆 Advanced Gold Analysis (Original Enhanced)
on:
  schedule:
    - cron: '30 13 * * 1-5'  # يومي
  workflow_dispatch:

env:
  NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}

jobs:
  advanced-analysis:
    name: 🧠 Advanced Gold Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: 📦 Install Advanced Packages
      run: |
        echo "🔄 Installing advanced analysis packages..."
        pip install --upgrade pip --quiet
        
        # Core packages
        pip install --no-cache-dir --quiet \
          yfinance pandas numpy requests scipy
        
        # AI and NLP
        pip install --no-cache-dir --quiet \
          transformers torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        
        pip install --no-cache-dir --quiet \
          vaderSentiment textblob nltk scikit-learn
        
        # Technical analysis
        pip install --no-cache-dir --quiet \
          pandas-ta matplotlib seaborn
        
        # Download models
        python -c "
        import nltk
        try:
            nltk.download('punkt', quiet=True)
            nltk.download('vader_lexicon', quiet=True)
            print('✅ NLTK data downloaded')
        except:
            print('⚠️ NLTK download skipped')
        "
        
        echo "✅ Advanced packages installed"

    - name: 🧠 Create Advanced Gold Analyzer (Original)
      run: |
        cat > main_analyzer.py << 'EOF'
        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-
        """
        🏆 محلل الذهب المتقدم - الإصدار المحسن
        Advanced Gold Analysis System with AI
        """
        
        import yfinance as yf
        import pandas as pd
        import numpy as np
        import requests
        import json
        import sqlite3
        import os
        import logging
        import warnings
        from datetime import datetime, timedelta
        from typing import Dict, List, Optional, Any
        import time
        from concurrent.futures import ThreadPoolExecutor
        
        # AI and NLP imports
        try:
            from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification
            import torch
            from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
            from textblob import TextBlob
            AI_AVAILABLE = True
        except ImportError as e:
            print(f"⚠️ AI packages not available: {e}")
            AI_AVAILABLE = False
        
        # Technical analysis
        try:
            import pandas_ta as ta
            TA_AVAILABLE = True
        except ImportError:
            TA_AVAILABLE = False
        
        warnings.filterwarnings('ignore')
        
        # إعداد نظام السجلات المتقدم
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('gold_analysis.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        logger = logging.getLogger(__name__)
        
        class AdvancedGoldAnalyzer:
            """محلل الذهب المتقدم مع الذكاء الاصطناعي"""
            
            def __init__(self):
                self.symbols = {
                    'gold_futures': 'GC=F',
                    'gold_etf': 'GLD', 
                    'silver': 'SLV',
                    'dollar_index': 'DX-Y.NYB',
                    'vix': '^VIX',
                    'treasury_10y': '^TNX',
                    'sp500': 'SPY',
                    'oil': 'CL=F',
                    'bitcoin': 'BTC-USD'
                }
                
                self.news_api_key = os.getenv('NEWS_API_KEY')
                self.db_path = 'gold_analysis_history.db'
                
                # AI Models
                self.sentiment_analyzer = None
                self.financial_sentiment_model = None
                
                # Data storage
                self.market_data = None
                self.gold_data = None
                
                logger.info("🚀 تم تهيئة محلل الذهب المتقدم بنجاح")
        
            def setup_database(self):
                """إعداد قاعدة البيانات المتقدمة"""
                try:
                    conn = sqlite3.connect(self.db_path)
                    cursor = conn.cursor()
                    
                    # جدول التحليلات الرئيسي
                    cursor.execute('''
                        CREATE TABLE IF NOT EXISTS gold_analysis_history (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            timestamp TEXT NOT NULL,
                            signal TEXT NOT NULL,
                            signal_strength TEXT NOT NULL,
                            total_score REAL NOT NULL,
                            gold_price REAL,
                            technical_score REAL,
                            news_sentiment_score REAL,
                            market_condition TEXT,
                            stop_loss REAL,
                            take_profit REAL,
                            rsi REAL,
                            macd_signal TEXT,
                            bb_position REAL,
                            volume_trend TEXT,
                            news_articles_count INTEGER,
                            top_news TEXT,
                            execution_time_ms INTEGER,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        )
                    ''')
                    
                    # جدول الأخبار المفصل
                    cursor.execute('''
                        CREATE TABLE IF NOT EXISTS news_analysis_detail (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            analysis_id INTEGER,
                            headline TEXT,
                            source TEXT,
                            sentiment_score REAL,
                            ai_sentiment_score REAL,
                            relevance_score INTEGER,
                            published_at TEXT,
                            url TEXT,
                            FOREIGN KEY (analysis_id) REFERENCES gold_analysis_history (id)
                        )
                    ''')
                    
                    conn.commit()
                    conn.close()
                    logger.info("✅ تم إعداد قاعدة البيانات بنجاح")
                    
                except Exception as e:
                    logger.error(f"❌ فشل إعداد قاعدة البيانات: {e}")
        
            def initialize_ai_models(self):
                """تحميل نماذج الذكاء الاصطناعي المتخصصة"""
                if not AI_AVAILABLE:
                    logger.warning("⚠️ نماذج الذكاء الاصطناعي غير متاحة")
                    return
                
                try:
                    logger.info("🧠 تحميل نموذج تحليل المشاعر المالي المتخصص...")
                    
                    # نموذج متخصص في التحليل المالي
                    model_name = "ProsusAI/finbert"
                    
                    # تحميل النموذج مع معالجة الأخطاء
                    try:
                        self.financial_sentiment_model = pipeline(
                            "sentiment-analysis",
                            model=model_name,
                            tokenizer=model_name,
                            device=0 if torch.cuda.is_available() else -1,
                            return_all_scores=True
                        )
                    except Exception as e:
                        logger.warning(f"⚠️ فشل تحميل FinBERT، استخدام نموذج بديل: {e}")
                        # استخدام نموذج بديل أخف
                        self.financial_sentiment_model = pipeline(
                            "sentiment-analysis",
                            model="cardiffnlp/twitter-roberta-base-sentiment-latest",
                            device=-1,
                            return_all_scores=True
                        )
                    
                    # VADER للتحليل السريع
                    self.sentiment_analyzer = SentimentIntensityAnalyzer()
                    
                    logger.info("✅ نموذج تحليل المشاعر جاهز")
                    
                except Exception as e:
                    logger.error(f"❌ فشل تحميل نماذج الذكاء الاصطناعي: {e}")
                    self.financial_sentiment_model = None
                    self.sentiment_analyzer = None
        
            def fetch_enhanced_market_data(self) -> bool:
                """جلب بيانات السوق المحسنة"""
                logger.info("📊 جلب بيانات السوق المحسنة...")
                
                try:
                    # جلب البيانات مع معالجة محسنة للأخطاء
                    symbols_list = list(self.symbols.values())
                    
                    # محاولة جلب البيانات الأساسية
                    try:
                        self.market_data = yf.download(
                            symbols_list,
                            period="2y",  # فترة أطول للتحليل العميق
                            interval="1d",
                            progress=True,
                            threads=True
                        )
                    except Exception as e:
                        logger.warning(f"⚠️ فشل الجلب الأساسي، محاولة بديلة: {e}")
                        
                        # محاولة بديلة بفترة أقصر
                        self.market_data = yf.download(
                            ['GLD', 'SLV', 'DX-Y.NYB', '^VIX', 'SPY'],
                            period="1y",
                            interval="1d",
                            progress=True
                        )
                    
                    if self.market_data is None or self.market_data.empty:
                        raise Exception("فشل في جلب بيانات السوق")
                    
                    # معالجة بيانات الذهب
                    gold_symbol = 'GC=F'  # استخدام العقود الآجلة أولاً
                    
                    if ('Close', gold_symbol) not in self.market_data.columns:
                        gold_symbol = 'GLD'  # التبديل إلى ETF
                    
                    if ('Close', gold_symbol) in self.market_data.columns:
                        self.gold_data = pd.DataFrame({
                            'Open': self.market_data[('Open', gold_symbol)],
                            'High': self.market_data[('High', gold_symbol)],
                            'Low': self.market_data[('Low', gold_symbol)],
                            'Close': self.market_data[('Close', gold_symbol)],
                            'Volume': self.market_data[('Volume', gold_symbol)]
                        }).dropna()
                    else:
                        # إذا فشل كل شيء، جلب GLD منفرداً
                        logger.warning("⚠️ محاولة جلب GLD منفرداً...")
                        gold_data_single = yf.download('GLD', period='1y', progress=False)
                        if not gold_data_single.empty:
                            self.gold_data = gold_data_single
                        else:
                            raise Exception("فشل في جلب بيانات الذهب")
                    
                    logger.info(f"✅ تم جلب {len(self.market_data)} يوم من البيانات بنجاح")
                    return True
                    
                except Exception as e:
                    logger.error(f"❌ فشل جلب بيانات السوق: {e}")
                    return False
        
            def calculate_advanced_technical_indicators(self):
                """حساب المؤشرات الفنية المتقدمة"""
                logger.info("📈 حساب المؤشرات الفنية المتقدمة...")
                
                if self.gold_data is None or self.gold_data.empty:
                    logger.error("❌ لا توجد بيانات ذهب للتحليل الفني")
                    return None
                
                try:
                    df = self.gold_data.copy()
                    
                    # المتوسطات المتحركة
                    df['SMA_20'] = df['Close'].rolling(20, min_periods=1).mean()
                    df['SMA_50'] = df['Close'].rolling(50, min_periods=1).mean()
                    df['SMA_200'] = df['Close'].rolling(200, min_periods=1).mean()
                    df['EMA_12'] = df['Close'].ewm(span=12).mean()
                    df['EMA_26'] = df['Close'].ewm(span=26).mean()
                    
                    # مؤشر القوة النسبية RSI
                    delta = df['Close'].diff()
                    gain = delta.where(delta > 0, 0).rolling(14, min_periods=1).mean()
                    loss = (-delta.where(delta < 0, 0)).rolling(14, min_periods=1).mean()
                    rs = gain / loss.replace(0, np.inf)
                    df['RSI'] = 100 - (100 / (1 + rs))
                    
                    # MACD
                    df['MACD'] = df['EMA_12'] - df['EMA_26']
                    df['MACD_Signal'] = df['MACD'].ewm(span=9).mean()
                    df['MACD_Histogram'] = df['MACD'] - df['MACD_Signal']
                    
                    # Bollinger Bands
                    df['BB_Middle'] = df['Close'].rolling(20, min_periods=1).mean()
                    df['BB_Std'] = df['Close'].rolling(20, min_periods=1).std()
                    df['BB_Upper'] = df['BB_Middle'] + (df['BB_Std'] * 2)
                    df['BB_Lower'] = df['BB_Middle'] - (df['BB_Std'] * 2)
                    df['BB_Position'] = (df['Close'] - df['BB_Lower']) / (df['BB_Upper'] - df['BB_Lower'])
                    
                    # Stochastic Oscillator
                    low_14 = df['Low'].rolling(14, min_periods=1).min()
                    high_14 = df['High'].rolling(14, min_periods=1).max()
                    df['Stoch_K'] = 100 * ((df['Close'] - low_14) / (high_14 - low_14))
                    df['Stoch_D'] = df['Stoch_K'].rolling(3, min_periods=1).mean()
                    
                    # Williams %R
                    df['Williams_R'] = -100 * (high_14 - df['Close']) / (high_14 - low_14)
                    
                    # مؤشر الحجم
                    df['Volume_SMA'] = df['Volume'].rolling(20, min_periods=1).mean()
                    df['Volume_Ratio'] = df['Volume'] / df['Volume_SMA']
                    
                    # ATR للتقلبات
                    tr1 = df['High'] - df['Low']
                    tr2 = abs(df['High'] - df['Close'].shift(1))
                    tr3 = abs(df['Low'] - df['Close'].shift(1))
                    tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
                    df['ATR'] = tr.rolling(14, min_periods=1).mean()
                    
                    # تنظيف البيانات
                    df = df.dropna()
                    
                    # تحديث البيانات
                    self.gold_data = df
                    
                    logger.info(f"✅ تم حساب المؤشرات الفنية - البيانات النظيفة: {len(df)} صف")
                    return df
                    
                except Exception as e:
                    logger.error(f"❌ فشل حساب المؤشرات الفنية: {e}")
                    return None
        
            def analyze_specialized_news(self) -> Dict[str, Any]:
                """تحليل الأخبار المتخصص بالذكاء الاصطناعي"""
                logger.info("📰 بدء تحليل الأخبار المتخصص...")
                
                if not self.news_api_key:
                    return {
                        'status': 'no_api_key',
                        'sentiment_score': 0,
                        'articles_count': 0,
                        'top_articles': []
                    }
                
                try:
                    logger.info("📰 بدء تحليل أخبار الذهب المتخصص...")
                    
                    # استعلامات متخصصة للذهب
                    specialized_queries = [
                        'gold OR XAU OR bullion OR "precious metals" OR "gold price"',
                        '"interest rates" OR "federal reserve" OR "monetary policy" OR "inflation"',
                        '"dollar index" OR DXY OR "monetary policy" OR "currency"',
                        'geopolitical OR "safe haven" OR crisis OR "market volatility"'
                    ]
                    
                    all_articles = []
                    
                    # جلب الأخبار بشكل متوازي
                    for query in specialized_queries:
                        try:
                            url = f"https://newsapi.org/v2/everything?q={query}&language=en&sortBy=publishedAt&pageSize=50&from={(datetime.now() - timedelta(days=3)).date()}&apiKey={self.news_api_key}"
                            
                            response = requests.get(url, timeout=10)
                            if response.status_code == 200:
                                articles = response.json().get('articles', [])
                                all_articles.extend(articles)
                                logger.info(f"📥 جلب {len(articles)} مقال من استعلام: {query[:50]}...")
                            
                        except Exception as e:
                            logger.warning(f"⚠️ فشل الاستعلام: {e}")
                            continue
                    
                    if not all_articles:
                        return {
                            'status': 'no_articles',
                            'sentiment_score': 0,
                            'articles_count': 0,
                            'top_articles': []
                        }
                    
                    # إزالة التكرار
                    unique_articles = []
                    seen_urls = set()
                    
                    for article in all_articles:
                        url = article.get('url', '')
                        if url not in seen_urls and len(article.get('title', '')) > 10:
                            seen_urls.add(url)
                            unique_articles.append(article)
                    
                    logger.info(f"🔍 تم جلب {len(unique_articles)} مقالاً فريداً")
                    
                    # تحليل الصلة بالذهب
                    gold_keywords = [
                        'gold', 'xau', 'bullion', 'precious', 'fed', 'federal reserve',
                        'interest rate', 'inflation', 'dollar', 'dxy', 'monetary',
                        'geopolitical', 'safe haven', 'crisis', 'volatility'
                    ]
                    
                    relevant_articles = []
                    
                    for article in unique_articles:
                        title = article.get('title', '').lower()
                        description = article.get('description', '').lower() if article.get('description') else ''
                        content = f"{title} {description}"
                        
                        # حساب نقاط الصلة
                        relevance_score = sum(1 for keyword in gold_keywords if keyword in content)
                        
                        if relevance_score >= 2:  # يجب أن يحتوي على كلمتين مفتاحيتين على الأقل
                            article['relevance_score'] = relevance_score
                            relevant_articles.append(article)
                    
                    logger.info(f"🎯 تم اختيار {len(relevant_articles)} مقالاً ذا صلة عالية بالذهب")
                    
                    if not relevant_articles:
                        return {
                            'status': 'no_relevant_articles',
                            'sentiment_score': 0,
                            'articles_count': 0,
                            'top_articles': []
                        }
                    
                    # تحليل المشاعر المتقدم
                    analyzed_articles = []
                    sentiment_scores = []
                    
                    for article in relevant_articles[:50]:  # تحليل أفضل 50 مقال
                        try:
                            title = article.get('title', '')
                            description = article.get('description', '') or ''
                            text = f"{title}. {description}"
                            
                            # تحليل VADER السريع
                            vader_score = 0
                            if self.sentiment_analyzer:
                                vader_result = self.sentiment_analyzer.polarity_scores(text)
                                vader_score = vader_result['compound']
                            
                            # تحليل AI المتخصص
                            ai_score = 0
                            if self.financial_sentiment_model:
                                try:
                                    # تقسيم النص إذا كان طويلاً
                                    text_truncated = text[:500]  # الحد الأقصى للنموذج
                                    ai_result = self.financial_sentiment_model(text_truncated)
                                    
                                    # استخراج النتيجة حسب نوع النموذج
                                    if isinstance(ai_result[0], list):
                                        # FinBERT format
                                        scores = {item['label']: item['score'] for item in ai_result[0]}
                                        ai_score = scores.get('positive', 0) - scores.get('negative', 0)
                                    else:
                                        # معالجة التنسيق العادي
                                        if ai_result[0]['label'] in ['POSITIVE', 'positive']:
                                            ai_score = ai_result[0]['score']
                                        elif ai_result[0]['label'] in ['NEGATIVE', 'negative']:
                                            ai_score = -ai_result[0]['score']
                                        else:
                                            ai_score = 0
                                            
                                except Exception as e:
                                    logger.warning(f"⚠️ خطأ في تحليل AI: {e}")
                                    ai_score = vader_score  # استخدام VADER كبديل
                            
                            # الجمع بين النتائج
                            combined_score = (vader_score * 0.4) + (ai_score * 0.6)
                            
                            # وزن حسب الصلة
                            relevance_weight = min(article['relevance_score'] / 5, 1.0)
                            final_score = combined_score * relevance_weight
                            
                            analyzed_article = {
                                'title': title,
                                'source': article.get('source', {}).get('name', 'Unknown'),
                                'published_at': article.get('publishedAt', ''),
                                'url': article.get('url', ''),
                                'relevance_score': article['relevance_score'],
                                'vader_sentiment': round(vader_score, 3),
                                'ai_sentiment': round(ai_score, 3),
                                'combined_sentiment': round(combined_score, 3),
                                'final_sentiment': round(final_score, 3)
                            }
                            
                            analyzed_articles.append(analyzed_article)
                            sentiment_scores.append(final_score)
                            
                        except Exception as e:
                            logger.warning(f"⚠️ خطأ في تحليل المقال: {e}")
                            continue
                    
                    if not sentiment_scores:
                        return {
                            'status': 'analysis_failed',
                            'sentiment_score': 0,
                            'articles_count': 0,
                            'top_articles': []
                        }
                    
                    # حساب النتيجة النهائية
                    overall_sentiment = np.mean(sentiment_scores)
                    sentiment_std = np.std(sentiment_scores)
                    
                    # ترتيب المقالات حسب التأثير
                    analyzed_articles.sort(key=lambda x: (x['relevance_score'], abs(x['final_sentiment'])), reverse=True)
                    
                    logger.info(f"📊 تحليل الأخبار مكتمل: النتيجة النهائية {overall_sentiment:.3f}")
                    
                    return {
                        'status': 'success',
                        'sentiment_score': round(overall_sentiment, 4),
                        'articles_count': len(analyzed_articles),
                        'positive_count': len([s for s in sentiment_scores if s > 0.1]),
                        'negative_count': len([s for s in sentiment_scores if s < -0.1]),
                        'neutral_count': len([s for s in sentiment_scores if abs(s) <= 0.1]),
                        'sentiment_std': round(sentiment_std, 4),
                        'top_articles': analyzed_articles[:15],
                        'confidence': min(1.0, len(analyzed_articles) / 20),
                        'summary': f"تم تحليل {len(analyzed_articles)} مقالاً ذا صلة عالية بالذهب"
                    }
                    
                except Exception as e:
                    logger.error(f"❌ فشل تحليل الأخبار: {e}")
                    return {
                        'status': 'error',
                        'error': str(e),
                        'sentiment_score': 0,
                        'articles_count': 0,
                        'top_articles': []
                    }
        
            def generate_comprehensive_signal(self, technical_data, news_data) -> Dict[str, Any]:
                """توليد إشارة التداول الشاملة"""
                try:
                    if technical_data is None or technical_data.empty:
                        return {
                            'signal': 'Hold',
                            'strength': 'Neutral',
                            'total_score': 0,
                            'confidence': 0
                        }
                    
                    latest = technical_data.iloc[-1]
                    
                    # النتائج الفنية (70%)
                    technical_score = 0
                    
                    # تحليل الاتجاه
                    current_price = latest['Close']
                    sma_20 = latest['SMA_20']
                    sma_50 = latest['SMA_50']
                    sma_200 = latest['SMA_200']
                    
                    if current_price > sma_200: technical_score += 3
                    if current_price > sma_50: technical_score += 2
                    if current_price > sma_20: technical_score += 1.5
                    if sma_20 > sma_50: technical_score += 1
                    if sma_50 > sma_200: technical_score += 0.5
                    
                    # تحليل الزخم
                    rsi = latest['RSI']
                    macd = latest['MACD']
                    macd_signal = latest['MACD_Signal']
                    
                    if macd > macd_signal: technical_score += 2
                    if 30 <= rsi <= 70: technical_score += 1
                    elif rsi < 30: technical_score += 2  # تشبع بيع - فرصة شراء
                    elif rsi > 70: technical_score -= 1  # تشبع شراء
                    
                    # تحليل التقلبات
                    bb_position = latest['BB_Position']
                    if bb_position < 0.2: technical_score += 1.5  # قرب الحد السفلي
                    elif bb_position > 0.8: technical_score -= 1  # قرب الحد العلوي
                    
                    # تحليل الحجم
                    volume_ratio = latest['Volume_Ratio']
                    if volume_ratio > 1.5: technical_score += 0.5  # حجم عالي يؤكد الحركة
                    
                    # تطبيع النتيجة الفنية
                    technical_score_normalized = max(-1, min(1, (technical_score - 5) / 5))
                    
                    # النتائج الإخبارية (30%)
                    news_score_normalized = 0
                    if news_data.get('status') == 'success':
                        news_score = news_data.get('sentiment_score', 0)
                        news_confidence = news_data.get('confidence', 0)
                        news_score_normalized = news_score * news_confidence
                    
                    # النتيجة الإجمالية
                    total_score = (technical_score_normalized * 0.7) + (news_score_normalized * 0.3)
                    
                    # تحديد الإشارة
                    if total_score >= 0.7:
                        signal = 'Strong Buy'
                        strength = 'Very Strong'
                    elif total_score >= 0.4:
                        signal = 'Buy'
                        strength = 'Strong'
                    elif total_score >= 0.1:
                        signal = 'Weak Buy'
                        strength = 'Moderate'
                    elif total_score <= -0.7:
                        signal = 'Strong Sell'
                        strength = 'Very Strong'
                    elif total_score <= -0.4:
                        signal = 'Sell'
                        strength = 'Strong'
                    elif total_score <= -0.1:
                        signal = 'Weak Sell'
                        strength = 'Moderate'
                    else:
                        signal = 'Hold'
                        strength = 'Neutral'
                    
                    # حساب مستوى الثقة
                    confidence = min(1.0, abs(total_score) + 0.3)
                    
                    # نقاط وقف الخسارة والهدف
                    atr = latest['ATR']
                    
                    if 'Buy' in signal:
                        stop_loss = current_price - (2.5 * atr)
                        take_profit = current_price + (4 * atr)
                    elif 'Sell' in signal:
                        stop_loss = current_price + (2.5 * atr)
                        take_profit = current_price - (4 * atr)
                    else:
                        stop_loss = current_price - (1.5 * atr)
                        take_profit = current_price + (2 * atr)
                    
                    return {
                        'signal': signal,
                        'strength': strength,
                        'total_score': round(total_score, 3),
                        'technical_score': round(technical_score_normalized, 3),
                        'news_score': round(news_score_normalized, 3),
                        'confidence': round(confidence, 3),
                        'current_price': round(current_price, 2),
                        'stop_loss': round(stop_loss, 2),
                        'take_profit': round(take_profit, 2),
                        'rsi': round(rsi, 1),
                        'macd_signal': 'Bullish' if macd > macd_signal else 'Bearish',
                        'bb_position': round(bb_position, 3),
                        'volume_trend': 'High' if volume_ratio > 1.5 else 'Normal' if volume_ratio > 0.8 else 'Low',
                        'market_condition': self._assess_market_condition(technical_data)
                    }
                    
                except Exception as e:
                    logger.error(f"❌ فشل توليد الإشارة: {e}")
                    return {
                        'signal': 'Hold',
                        'strength': 'Neutral',
                        'total_score': 0,
                        'confidence': 0
                    }
        
            def _assess_market_condition(self, technical_data) -> str:
                """تقييم حالة السوق العامة"""
                try:
                    latest = technical_data.iloc[-1]
                    
                    # تحليل التقلبات
                    atr = latest['ATR']
                    price = latest['Close']
                    volatility = atr / price
                    
                    # تحليل الاتجاه
                    sma_20 = latest['SMA_20']
                    sma_50 = latest['SMA_50']
                    
                    if volatility > 0.03:
                        condition = 'high_volatility'
                    elif volatility < 0.015:
                        condition = 'low_volatility'
                    elif price > sma_50 and sma_20 > sma_50:
                        condition = 'bullish_trend'
                    elif price < sma_50 and sma_20 < sma_50:
                        condition = 'bearish_trend'
                    else:
                        condition = 'sideways'
                    
                    return condition
                    
                except:
                    return 'normal'
        
            def save_analysis_results(self, signal_data, technical_data, news_data, execution_time) -> int:
                """حفظ نتائج التحليل في قاعدة البيانات"""
                try:
                    conn = sqlite3.connect(self.db_path)
                    cursor = conn.cursor()
                    
                    # حفظ التحليل الرئيسي
                    cursor.execute('''
                        INSERT INTO gold_analysis_history (
                            timestamp, signal, signal_strength, total_score, gold_price,
                            technical_score, news_sentiment_score, market_condition,
                            stop_loss, take_profit, rsi, macd_signal, bb_position,
                            volume_trend, news_articles_count, top_news, execution_time_ms
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        datetime.now().isoformat(),
                        signal_data.get('signal', 'Hold'),
                        signal_data.get('strength', 'Neutral'),
                        signal_data.get('total_score', 0),
                        signal_data.get('current_price', 0),
                        signal_data.get('technical_score', 0),
                        signal_data.get('news_score', 0),
                        signal_data.get('market_condition', 'normal'),
                        signal_data.get('stop_loss', 0),
                        signal_data.get('take_profit', 0),
                        signal_data.get('rsi', 50),
                        signal_data.get('macd_signal', 'Neutral'),
                        signal_data.get('bb_position', 0.5),
                        signal_data.get('volume_trend', 'Normal'),
                        news_data.get('articles_count', 0),
                        json.dumps([article['title'] for article in news_data.get('top_articles', [])[:5]], ensure_ascii=False),
                        execution_time
                    ))
                    
                    analysis_id = cursor.lastrowid
                    
                    # حفظ تفاصيل الأخبار
                    for article in news_data.get('top_articles', [])[:10]:
                        cursor.execute('''
                            INSERT INTO news_analysis_detail (
                                analysis_id, headline, source, sentiment_score,
                                ai_sentiment_score, relevance_score, published_at, url
                            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                        ''', (
                            analysis_id,
                            article.get('title', '')[:500],
                            article.get('source', '')[:100],
                            article.get('vader_sentiment', 0),
                            article.get('ai_sentiment', 0),
                            article.get('relevance_score', 0),
                            article.get('published_at', ''),
                            article.get('url', '')[:500]
                        ))
                    
                    conn.commit()
                    conn.close()
                    
                    logger.info(f"💾 تم حفظ النتائج في السجل التاريخي - ID: {analysis_id}")
                    return analysis_id
                    
                except Exception as e:
                    logger.error(f"❌ فشل حفظ النتائج: {e}")
                    return -1
        
            def run_comprehensive_analysis(self):
                """تشغيل التحليل الشامل"""
                start_time = time.time()
                logger.info("🚀 بدء التحليل الشامل للذهب...")
                
                try:
                    # إعداد قاعدة البيانات
                    self.setup_database()
                    
                    # تحميل نماذج الذكاء الاصطناعي
                    self.initialize_ai_models()
                    
                    # جلب بيانات السوق
                    if not self.fetch_enhanced_market_data():
                        raise Exception("فشل في جلب بيانات السوق")
                    
                    # حساب المؤشرات الفنية
                    technical_data = self.calculate_advanced_technical_indicators()
                    if technical_data is None:
                        raise Exception("فشل في حساب المؤشرات الفنية")
                    
                    # تحليل الأخبار
                    news_data = self.analyze_specialized_news()
                    
                    # توليد الإشارة الشاملة
                    signal_data = self.generate_comprehensive_signal(technical_data, news_data)
                    
                    # حساب وقت التنفيذ
                    execution_time = int((time.time() - start_time) * 1000)
                    
                    # حفظ النتائج
                    analysis_id = self.save_analysis_results(signal_data, technical_data, news_data, execution_time)
                    
                    # إنشاء التقرير النهائي
                    final_report = {
                        'timestamp': datetime.now().isoformat(),
                        'analysis_id': analysis_id,
                        'execution_time_ms': execution_time,
                        'status': 'success',
                        'signal': signal_data,
                        'technical_analysis': {
                            'data_points': len(technical_data),
                            'current_price': signal_data.get('current_price', 0),
                            'rsi': signal_data.get('rsi', 0),
                            'macd_signal': signal_data.get('macd_signal', 'Neutral'),
                            'bb_position': signal_data.get('bb_position', 0.5),
                            'volume_trend': signal_data.get('volume_trend', 'Normal'),
                            'market_condition': signal_data.get('market_condition', 'normal')
                        },
                        'news_analysis': {
                            'status': news_data.get('status', 'unknown'),
                            'articles_count': news_data.get('articles_count', 0),
                            'sentiment_score': news_data.get('sentiment_score', 0),
                            'top_headlines': [article['title'] for article in news_data.get('top_articles', [])[:5]]
                        },
                        'risk_management': {
                            'stop_loss': signal_data.get('stop_loss', 0),
                            'take_profit': signal_data.get('take_profit', 0),
                            'risk_reward_ratio': round((signal_data.get('take_profit', 0) - signal_data.get('current_price', 0)) / 
                                                      (signal_data.get('current_price', 0) - signal_data.get('stop_loss', 0)), 2) 
                                                      if signal_data.get('stop_loss', 0) != signal_data.get('current_price', 0) else 0
                        }
                    }
                    
                    # حفظ التقرير النهائي
                    with open('gold_analysis_enhanced.json', 'w', encoding='utf-8') as f:
                        json.dump(final_report, f, ensure_ascii=False, indent=2, default=str)
                    
                    logger.info("✅ تم إنجاز التحليل الشامل بنجاح")
                    
                    # طباعة الملخص النهائي
                    self._print_final_summary(signal_data, news_data)
                    
                    return final_report
                    
                except Exception as e:
                    logger.error(f"❌ فشل التحليل الشامل: {e}")
                    return {
                        'status': 'error',
                        'error': str(e),
                        'timestamp': datetime.now().isoformat()
                    }
        
            def _print_final_summary(self, signal_data, news_data):
                """طباعة الملخص النهائي"""
                logger.info("")
                logger.info("=" * 60)
                logger.info("📋 ملخص التحليل النهائي")
                logger.info("=" * 60)
                logger.info(f"🎯 الإشارة: {signal_data.get('signal', 'N/A')} ({signal_data.get('strength', 'N/A')})")
                logger.info(f"📊 النتيجة الإجمالية: {signal_data.get('total_score', 0)}")
                logger.info(f"💰 سعر الذهب: ${signal_data.get('current_price', 0)}")
                logger.info(f"🛑 وقف الخسارة: ${signal_data.get('stop_loss', 0)}")
                logger.info(f"📈 حالة السوق: {signal_data.get('market_condition', 'normal')}")
                logger.info(f"📰 تحليل الأخبار: {news_data.get('status', 'unknown')} (النتيجة: {news_data.get('sentiment_score', 0)})")
        
        def main():
            """الدالة الرئيسية"""
            try:
                analyzer = AdvancedGoldAnalyzer()
                result = analyzer.run_comprehensive_analysis()
                
                if result.get('status') == 'success':
                    print("\n🎉 تم حفظ التحليل الكامل في:")
                    print(" - gold_analysis_enhanced.json")
                    print(" - gold_analysis_history.db")
                    print(" - gold_analysis.log")
                    
                    # طباعة أهم الأخبار
                    news_headlines = result.get('news_analysis', {}).get('top_headlines', [])
                    if news_headlines:
                        print(f"\n📰 أهم {len(news_headlines)} أخبار متعلقة بالذهب:")
                        for i, headline in enumerate(news_headlines, 1):
                            print(f" {i}. {headline[:80]}...")
                    
                    return 0
                else:
                    print(f"❌ فشل التحليل: {result.get('error', 'خطأ غير معروف')}")
                    return 1
                    
            except Exception as e:
                print(f"💥 خطأ حرج: {e}")
                return 1
        
        if __name__ == "__main__":
            exit(main())
        EOF

    - name: 🧠 Execute Advanced Analysis
      id: analysis
      run: |
        echo "🚀 Starting Advanced Gold Analysis..."
        timeout 900 python main_analyzer.py
        echo "analysis_status=success" >> $GITHUB_OUTPUT

    - name: 📊 Display Results
      if: steps.analysis.outputs.analysis_status == 'success'
      run: |
        if [ -f "gold_analysis_enhanced.json" ]; then
          echo "🎉 Advanced Analysis Results:"
          echo "=================================="
          
          python -c "
        import json
        
        with open('gold_analysis_enhanced.json', 'r') as f:
            data = json.load(f)
        
        signal = data['signal']
        technical = data['technical_analysis']
        news = data['news_analysis']
        
        print(f'🎯 Signal: {signal[\"signal\"]} ({signal[\"strength\"]})')
        print(f'📊 Total Score: {signal[\"total_score\"]}')
        print(f'💰 Gold Price: \${signal[\"current_price\"]:,.2f}')
        print(f'🛑 Stop Loss: \${signal[\"stop_loss\"]:,.2f}')
        print(f'🎯 Take Profit: \${signal[\"take_profit\"]:,.2f}')
        print(f'📈 RSI: {signal[\"rsi\"]}')
        print(f'📊 MACD: {signal[\"macd_signal\"]}')
        print(f'📰 News Articles: {news[\"articles_count\"]}')
        print(f'📊 News Sentiment: {news[\"sentiment_score\"]:+.4f}')
        print(f'⚡ Execution: {data[\"execution_time_ms\"]}ms')
        print(f'🆔 Analysis ID: {data[\"analysis_id\"]}')
        "
        else
          echo "❌ Results file not found"
        fi

    - name: 📝 Create Enhanced README
      if: steps.analysis.outputs.analysis_status == 'success'
      run: |
        python -c "
        import json
        from datetime import datetime
        
        with open('gold_analysis_enhanced.json', 'r') as f:
            data = json.load(f)
        
        signal = data['signal']
        technical = data['technical_analysis']
        news = data['news_analysis']
        risk = data['risk_management']
        
        readme = f'''# 🏆 Advanced Gold Analysis System
        
        **Generated:** {datetime.fromisoformat(data['timestamp']).strftime('%Y-%m-%d %H:%M:%S UTC')}
        
        ## 🎯 Trading Signal
        
        **{signal['signal']}** - {signal['strength']}
        
        - **Total Score:** {signal['total_score']}
        - **Confidence:** {signal['confidence']:.1%}
        - **Technical Score:** {signal['technical_score']:+.3f}
        - **News Score:** {signal['news_score']:+.3f}
        
        ## 💰 Market Data
        
        | Metric | Value |
        |--------|-------|
        | Gold Price | \${signal['current_price']:,.2f} |
        | RSI (14) | {signal['rsi']:.1f} |
        | MACD Signal | {signal['macd_signal']} |
        | Bollinger Position | {signal['bb_position']:.1%} |
        | Volume Trend | {signal['volume_trend']} |
        | Market Condition | {signal['market_condition'].replace('_', ' ').title()} |
        
        ## 🔧 Risk Management
        
        - **Stop Loss:** \${signal['stop_loss']:,.2f}
        - **Take Profit:** \${signal['take_profit']:,.2f}
        - **Risk/Reward Ratio:** {risk['risk_reward_ratio']:.2f}
        
        ## 📰 News Analysis
        
        - **Status:** {news['status'].title()}
        - **Articles Analyzed:** {news['articles_count']}
        - **Sentiment Score:** {news['sentiment_score']:+.4f}
        '''
        
        headlines = news.get('top_headlines', [])
        if headlines:
            readme += '''
        ## 📋 Top Headlines
        '''
            for i, headline in enumerate(headlines, 1):
                readme += f'''
        {i}. {headline}
        '''
        
        readme += f'''
        
        ---
        
        **Analysis ID:** {data['analysis_id']} | **Execution:** {data['execution_time_ms']}ms | **Data Points:** {technical['data_points']}
        
        *Advanced AI-powered analysis with specialized financial sentiment models*
        '''
        
        with open('README.md', 'w', encoding='utf-8') as f:
            f.write(readme)
        
        print('✅ Enhanced README created')
        "

    - name: 💾 Commit Advanced Results
      if: steps.analysis.outputs.analysis_status == 'success'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "🏆 Advanced Gold Analysis"
        
        git add gold_analysis_enhanced.json README.md
        git add gold_analysis_history.db gold_analysis.log
        
        if git diff --staged --quiet; then
          echo "⚠️ No changes to commit"
        else
          SIGNAL=$(python -c "import json; data=json.load(open('gold_analysis_enhanced.json')); print(f\"{data['signal']['signal']} ({data['signal']['total_score']})\")" 2>/dev/null || echo 'Advanced Analysis')
          
          git commit -m "🏆 Advanced Gold Analysis: $SIGNAL - $(date -u '+%Y-%m-%d %H:%M UTC')"
          git push
          echo "✅ Advanced results pushed"
        fi

    - name: 📤 Upload Complete Analysis
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: advanced-gold-analysis
        path: |
          gold_analysis_enhanced.json
          gold_analysis_history.db
          gold_analysis.log
          README.md
        retention-days: 90

    - name: 🎉 Success Summary
      if: success()
      run: |
        echo "🏆 ADVANCED GOLD ANALYSIS COMPLETE!"
        echo "====================================="
        
        python -c "
        try:
            import json
            with open('gold_analysis_enhanced.json', 'r') as f:
                data = json.load(f)
            
            print(f'🎯 Final Signal: {data[\"signal\"][\"signal\"]} ({data[\"signal\"][\"strength\"]})')
            print(f'📊 Total Score: {data[\"signal\"][\"total_score\"]}')
            print(f'💰 Gold Price: \${data[\"signal\"][\"current_price\"]:,.2f}')
            print(f'📰 News Articles: {data[\"news_analysis\"][\"articles_count\"]}')
            print(f'⚡ Execution: {data[\"execution_time_ms\"]}ms')
            print(f'🆔 Analysis ID: {data[\"analysis_id\"]}')
            print(f'\\n🎉 Advanced AI analysis with specialized financial models!')
        except:
            print('✅ Analysis completed successfully')
        "