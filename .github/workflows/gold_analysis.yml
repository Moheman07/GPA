name: Gold Analysis + News
on:
  workflow_dispatch:
  schedule:
    - cron: '30 13 * * 1-5'  # يومي
jobs:
  analyze:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
    env:
      NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - run: pip install yfinance pandas numpy requests

    - name: Create Full Analyzer with News
      run: |
        cat > full_analyzer.py << 'EOF'
        import yfinance as yf
        import pandas as pd
        import numpy as np
        import requests
        import json
        import os
        from datetime import datetime, timedelta
        
        def analyze_news():
            """تحليل الأخبار المبسط"""
            api_key = os.getenv('NEWS_API_KEY')
            
            if not api_key:
                return {
                    "status": "no_api_key",
                    "news_score": 0,
                    "articles_count": 0,
                    "headlines": []
                }
            
            try:
                # كلمات إيجابية وسلبية للذهب
                positive_words = [
                    'surge', 'rise', 'gain', 'bull', 'up', 'higher', 'rally', 'climb',
                    'inflation', 'safe haven', 'uncertainty', 'crisis', 'fear', 
                    'dovish', 'stimulus', 'weak dollar', 'rate cut'
                ]
                
                negative_words = [
                    'fall', 'drop', 'decline', 'bear', 'down', 'lower', 'crash', 'plunge',
                    'strong dollar', 'rate hike', 'hawkish', 'sell-off', 'profit taking'
                ]
                
                # جلب أخبار الذهب
                queries = [
                    'gold price',
                    'gold market',
                    'federal reserve gold',
                    'inflation gold'
                ]
                
                all_articles = []
                
                for query in queries:
                    url = f"https://newsapi.org/v2/everything?q={query}&language=en&sortBy=publishedAt&pageSize=15&from={(datetime.now() - timedelta(days=2)).date()}&apiKey={api_key}"
                    
                    try:
                        response = requests.get(url, timeout=10)
                        if response.status_code == 200:
                            data = response.json()
                            all_articles.extend(data.get('articles', []))
                    except:
                        continue
                
                if not all_articles:
                    return {
                        "status": "no_articles",
                        "news_score": 0,
                        "articles_count": 0,
                        "headlines": []
                    }
                
                # تحليل المشاعر البسيط
                news_score = 0
                processed_articles = []
                seen_titles = set()
                
                for article in all_articles[:30]:  # أفضل 30 مقال
                    title = article.get('title', '').lower()
                    description = article.get('description', '') or ''
                    content = f"{title} {description.lower()}"
                    
                    # تجنب المكرر
                    if title in seen_titles or len(title) < 10:
                        continue
                    seen_titles.add(title)
                    
                    # فحص الكلمات الإيجابية والسلبية
                    positive_count = sum(1 for word in positive_words if word in content)
                    negative_count = sum(1 for word in negative_words if word in content)
                    
                    # حساب نقاط المقال
                    article_score = positive_count - negative_count
                    
                    # إذا يتحدث عن الذهب مباشرة
                    if any(word in content for word in ['gold', 'xau', 'precious metal']):
                        article_score *= 1.5  # زيادة الوزن
                        
                        news_score += article_score
                        
                        processed_articles.append({
                            'title': article.get('title', '')[:100],
                            'source': article.get('source', {}).get('name', 'Unknown'),
                            'score': round(article_score, 1),
                            'sentiment': 'positive' if article_score > 0 else 'negative' if article_score < 0 else 'neutral'
                        })
                
                # تطبيع النقاط
                if len(processed_articles) > 0:
                    avg_news_score = news_score / len(processed_articles)
                    news_score = max(-2, min(2, avg_news_score))  # بين -2 و +2
                else:
                    news_score = 0
                
                return {
                    "status": "success",
                    "news_score": round(news_score, 2),
                    "articles_count": len(processed_articles),
                    "headlines": processed_articles[:8],  # أفضل 8 مقالات
                    "positive_articles": len([a for a in processed_articles if a['score'] > 0]),
                    "negative_articles": len([a for a in processed_articles if a['score'] < 0])
                }
                
            except Exception as e:
                return {
                    "status": "error",
                    "error": str(e),
                    "news_score": 0,
                    "articles_count": 0,
                    "headlines": []
                }
        
        def analyze_technical():
            """التحليل الفني"""
            try:
                # جلب البيانات
                symbols = ['GLD', 'DX-Y.NYB', '^VIX', 'SPY']
                data = yf.download(symbols, period='6mo', progress=False)
                
                # معالجة بيانات الذهب
                gold = data[('Close', 'GLD')].dropna()
                
                # المؤشرات
                sma20 = gold.rolling(20).mean()
                sma50 = gold.rolling(50).mean()
                
                # RSI
                delta = gold.diff()
                gain = delta.where(delta > 0, 0).rolling(14).mean()
                loss = (-delta.where(delta < 0, 0)).rolling(14).mean()
                rsi = 100 - (100 / (1 + gain / loss))
                
                # بيانات حالية
                current_price = gold.iloc[-1]
                current_rsi = rsi.iloc[-1]
                current_sma20 = sma20.iloc[-1]
                current_sma50 = sma50.iloc[-1]
                
                # نقاط فنية
                tech_score = 0
                if current_price > current_sma50: tech_score += 2
                if current_price > current_sma20: tech_score += 1.5
                if 30 < current_rsi < 70: tech_score += 1
                if current_sma20 > current_sma50: tech_score += 0.5
                
                tech_score = (tech_score / 5) * 2 - 1  # تطبيع بين -1 و +1
                
                # السوق العام
                try:
                    vix = data[('Close', '^VIX')].iloc[-1]
                    dxy = data[('Close', 'DX-Y.NYB')].iloc[-1]
                except:
                    vix = dxy = 0
                
                return {
                    "status": "success",
                    "tech_score": round(tech_score, 3),
                    "gold_price": round(current_price, 2),
                    "rsi": round(current_rsi, 1),
                    "sma_20": round(current_sma20, 2),
                    "sma_50": round(current_sma50, 2),
                    "vix": round(vix, 1),
                    "dxy": round(dxy, 2),
                    "trend": "Bullish" if current_price > current_sma50 else "Bearish",
                    "data_points": len(gold)
                }
                
            except Exception as e:
                return {
                    "status": "error",
                    "error": str(e),
                    "tech_score": 0
                }
        
        def main():
            print("🚀 Starting Gold Analysis with News...")
            
            # التحليل الفني
            print("📈 Technical analysis...")
            tech_result = analyze_technical()
            
            # تحليل الأخبار
            print("📰 News analysis...")
            news_result = analyze_news()
            
            if tech_result['status'] == 'success':
                # حساب النتيجة الإجمالية
                tech_score = tech_result['tech_score']
                news_score = news_result.get('news_score', 0)
                
                # الأوزان: 70% فني، 30% أخبار
                total_score = (tech_score * 0.7) + (news_score * 0.3)
                
                # تحديد الإشارة
                if total_score >= 0.6:
                    signal = "Strong Buy"
                elif total_score >= 0.3:
                    signal = "Buy"  
                elif total_score >= -0.3:
                    signal = "Hold"
                elif total_score >= -0.6:
                    signal = "Sell"
                else:
                    signal = "Strong Sell"
                
                # النتيجة النهائية
                result = {
                    "timestamp": datetime.utcnow().isoformat(),
                    "status": "success",
                    
                    # الإشارة
                    "signal": signal,
                    "total_score": round(total_score, 3),
                    "technical_score": tech_score,
                    "news_score": news_score,
                    
                    # بيانات السوق
                    "gold_price": tech_result['gold_price'],
                    "rsi": tech_result['rsi'], 
                    "sma_20": tech_result['sma_20'],
                    "sma_50": tech_result['sma_50'],
                    "vix": tech_result['vix'],
                    "dxy": tech_result['dxy'],
                    "trend": tech_result['trend'],
                    
                    # تحليل الأخبار
                    "news_analysis": {
                        "status": news_result['status'],
                        "articles_count": news_result.get('articles_count', 0),
                        "positive_articles": news_result.get('positive_articles', 0),
                        "negative_articles": news_result.get('negative_articles', 0),
                        "top_headlines": news_result.get('headlines', [])[:5]
                    },
                    
                    "data_points": tech_result['data_points']
                }
            else:
                result = {
                    "timestamp": datetime.utcnow().isoformat(),
                    "status": "error",
                    "error": tech_result.get('error', 'Technical analysis failed'),
                    "signal": "Hold",
                    "total_score": 0
                }
            
            # حفظ النتيجة
            with open('gold_analysis_complete.json', 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)
            
            # طباعة الملخص
            print(f"✅ Analysis Complete!")
            print(f"Signal: {result['signal']}")
            print(f"Total Score: {result.get('total_score', 0)}")
            
            if result['status'] == 'success':
                print(f"Gold Price: ${result['gold_price']}")
                print(f"Technical: {result['technical_score']:.3f}")
                print(f"News: {result['news_score']:.3f}")
                print(f"Articles: {result['news_analysis']['articles_count']}")
        
        if __name__ == "__main__":
            main()
        EOF

    - run: python full_analyzer.py

    - name: Display Complete Results
      run: |
        if [ -f "gold_analysis_complete.json" ]; then
          echo "✅ Complete Analysis Done!"
          echo ""
          python -c "
        import json
        with open('gold_analysis_complete.json', 'r') as f:
            data = json.load(f)
        
        print(f'🎯 Signal: {data[\"signal\"]}')
        print(f'📊 Total Score: {data.get(\"total_score\", 0):.3f}')
        print(f'💰 Gold Price: \${data.get(\"gold_price\", 0):,.2f}')
        print(f'📈 Technical: {data.get(\"technical_score\", 0):.3f}')  
        print(f'📰 News: {data.get(\"news_score\", 0):.3f}')
        print(f'📋 Articles: {data.get(\"news_analysis\", {}).get(\"articles_count\", 0)}')
        print(f'✅ Status: {data[\"status\"]}')
        
        headlines = data.get('news_analysis', {}).get('top_headlines', [])
        if headlines:
            print(f'\\n📰 Top Headlines:')
            for i, h in enumerate(headlines[:3], 1):
                print(f'  {i}. {h[\"title\"]} [{h[\"source\"]}]')
          "
        else
          echo "❌ No results file"
        fi

    - name: Commit Complete Results
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Gold Analysis Bot 🤖"
        git add gold_analysis_complete.json
        
        SIGNAL=$(python -c "import json; print(json.load(open('gold_analysis_complete.json'))['signal'])" 2>/dev/null || echo 'Update')
        
        git commit -m "🤖 Gold Analysis: $SIGNAL - $(date -u '+%m/%d %H:%M UTC')" || echo "No changes"
        git push || echo "Push completed"

    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: complete-gold-analysis
        path: gold_analysis_complete.json