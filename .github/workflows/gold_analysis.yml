name: Gold Analysis

on:
  schedule:
    - cron: '0 6,14 * * 1-5'
  workflow_dispatch:
    inputs:
      analysis_type:
        description: 'Analysis Type'
        required: false
        default: 'full'
        type: choice
        options:
        - full
        - quick
      run_news_analysis:
        description: 'Run news analysis'
        required: false
        default: true
        type: boolean
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  issues: write

env:
  PYTHONPATH: ${{ github.workspace }}
  TZ: 'UTC'

jobs:
  analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Analysis
      env:
        NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
        FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
        ANALYSIS_TYPE: ${{ github.event.inputs.analysis_type || 'full' }}
        RUN_NEWS_ANALYSIS: ${{ github.event.inputs.run_news_analysis || 'true' }}
        DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}
      run: |
        echo "Starting analysis..."
        echo "Analysis type: $ANALYSIS_TYPE"
        echo "Run news analysis: $RUN_NEWS_ANALYSIS"
        echo "Debug mode: $DEBUG_MODE"
        
        if [ -f "simple_gold_analyzer.py" ]; then
          echo "Running simple_gold_analyzer.py"
          python simple_gold_analyzer.py
        else
          echo "Creating emergency analyzer"
          cat > emergency_analyzer.py << 'SCRIPT_EOF'
import yfinance as yf
import json
from datetime import datetime

try:
    print("Fetching gold data...")
    data = yf.download("GC=F", period="5d", progress=False)
    if not data.empty:
        price = float(data["Close"].iloc[-1])
        prev_price = float(data["Close"].iloc[-2])
        change_pct = ((price - prev_price) / prev_price) * 100
        
        result = {
            "timestamp": datetime.now().isoformat(),
            "price": round(price, 2),
            "change_pct": round(change_pct, 2),
            "signal": "Buy" if change_pct > 1 else "Sell" if change_pct < -1 else "Hold",
            "status": "success"
        }
        
        with open("gold_analysis_v3.json", "w") as f:
            json.dump(result, f, indent=2)
        
        print(f"Gold Price: ${price:.2f}")
        print(f"Change: {change_pct:.2f}%")
        print(f"Signal: {result['signal']}")
    else:
        raise Exception("No data received")
except Exception as e:
    print(f"Error: {e}")
    with open("gold_analysis_v3.json", "w") as f:
        json.dump({"error": str(e), "timestamp": datetime.now().isoformat()}, f)
SCRIPT_EOF
          
          python emergency_analyzer.py
        fi
        
        echo "Analysis completed"
    
    - name: Upload Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gold-results-${{ github.run_number }}
        path: '*.json'
        retention-days: 30
    
    - name: Create Report
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            const files = fs.readdirSync('.');
            const resultFile = files.find(f => f.includes('gold') && f.endsWith('.json'));
            
            if (resultFile) {
              const result = JSON.parse(fs.readFileSync(resultFile, 'utf8'));
              
              let body = `## Gold Analysis Report\n\n`;
              body += `**Time:** ${new Date().toISOString()}\n`;
              body += `**Run:** #${context.runNumber}\n\n`;
              
              if (result.price) {
                body += `### Results\n`;
                body += `- Price: $${result.price}\n`;
                body += `- Change: ${result.change_pct}%\n`;
                body += `- Signal: ${result.signal}\n`;
              } else if (result.error) {
                body += `### Error\n${result.error}\n`;
              }
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Gold Analysis - ${new Date().toISOString().split('T')[0]}`,
                body: body,
                labels: ['gold-analysis']
              });
              
              console.log('Issue created successfully');
            }
          } catch (error) {
            console.log('Error:', error.message);
          }
