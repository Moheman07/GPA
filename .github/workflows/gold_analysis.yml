name: Gold Analysis V3 Auto-Commit

on:
  schedule:
    - cron: '0 */3 * * 1-5'
  workflow_dispatch:
  push:
    branches: [ main, master ]

permissions:
  contents: write

jobs:
  analyze:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install yfinance pandas numpy requests scikit-learn xgboost textblob spacy backtrader aiohttp joblib
        python -m spacy download en_core_web_sm || true
        
    - name: Auto Fix Script Issues
      run: |
        cat > auto_fix.py << 'EOF'
        import re
        
        print("🔧 إصلاح السكربت أوتوماتيكياً...")
        
        # قراءة الملف
        with open('main_analyzer_v3.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # إصلاح المسافات البادئة
        content = re.sub(r'\ndef _get_future_pricesKATEX_INLINE_OPENself, analysis_dateKATEX_INLINE_CLOSE:', r'    def _get_future_prices(self, analysis_date):', content)
        content = re.sub(r'\ndef fetch_multi_timeframe_dataKATEX_INLINE_OPENselfKATEX_INLINE_CLOSE:', r'    def fetch_multi_timeframe_data(self):', content)
        content = re.sub(r'\ndef generate_professional_signals_v3KATEX_INLINE_OPENself,', r'    def generate_professional_signals_v3(self,', content)
        
        # إصلاح التقاطعات الذهبية
        content = re.sub(r'\n\s+# التقاطعات الذهبية', r'\n            # التقاطعات الذهبية', content)
        
        # حفظ الملف المصحح
        with open('main_analyzer_v3.py', 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("✅ تم إصلاح السكربت!")
        EOF
        
        python auto_fix.py
        
    - name: Run Analysis V3
      env:
        NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
        FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
      run: |
        echo "🚀 تشغيل التحليل..."
        python main_analyzer_v3.py || {
          echo "⚠️ فشل التحليل، محاولة إنشاء تحليل بسيط..."
          
          # إنشاء تحليل بسيط في حالة الفشل
          cat > simple_analysis.py << 'EOF'
          import yfinance as yf
          import json
          from datetime import datetime
          
          try:
              data = yf.download('GC=F', period='1mo', progress=False, auto_adjust=True)
              if not data.empty:
                  latest_price = float(data['Close'].iloc[-1])
                  
                  # حساب RSI بسيط
                  delta = data['Close'].diff()
                  gain = delta.where(delta > 0, 0).rolling(14).mean()
                  loss = (-delta.where(delta < 0, 0)).rolling(14).mean()
                  rs = gain / loss
                  rsi = 100 - (100 / (1 + rs))
                  latest_rsi = float(rsi.iloc[-1])
                  
                  # إشارة بسيطة
                  if latest_rsi < 30:
                      signal = "Strong Buy"
                      confidence = "High"
                  elif latest_rsi < 45:
                      signal = "Buy"
                      confidence = "Medium"
                  elif latest_rsi > 70:
                      signal = "Strong Sell"
                      confidence = "High"
                  elif latest_rsi > 55:
                      signal = "Sell"
                      confidence = "Medium"
                  else:
                      signal = "Hold"
                      confidence = "Low"
                  
                  # حفظ النتائج
                  summary = {
                      'last_update': datetime.now().isoformat(),
                      'version': '3.0',
                      'signal': signal,
                      'confidence': confidence,
                      'price': round(latest_price, 2),
                      'ml_probability': None,
                      'market_condition': f"{signal} - RSI: {latest_rsi:.1f}"
                  }
                  
                  with open('gold_analysis_summary.json', 'w') as f:
                      json.dump(summary, f, indent=2)
                  
                  analysis = {
                      'timestamp': datetime.now().isoformat(),
                      'status': 'success',
                      'version': '3.0',
                      'gold_analysis': {
                          'signal': signal,
                          'confidence': confidence,
                          'current_price': round(latest_price, 2),
                          'technical_summary': {'rsi': round(latest_rsi, 1)}
                      }
                  }
                  
                  with open('gold_analysis_v3.json', 'w') as f:
                      json.dump(analysis, f, indent=2)
                  
                  print(f"✅ السعر: ${latest_price:.2f}")
                  print(f"✅ RSI: {latest_rsi:.1f}")
                  print(f"✅ الإشارة: {signal}")
              
          except Exception as e:
              print(f"❌ خطأ: {e}")
              # إنشاء ملف افتراضي
              default_summary = {
                  'last_update': datetime.now().isoformat(),
                  'version': '3.0',
                  'signal': None,
                  'confidence': None,
                  'price': None,
                  'ml_probability': None,
                  'market_condition': 'خطأ في التحليل'
              }
              with open('gold_analysis_summary.json', 'w') as f:
                  json.dump(default_summary, f, indent=2)
          EOF
          
          python simple_analysis.py
        }
        
    - name: Verify Results
      run: |
        echo "📄 التحقق من النتائج..."
        if [ -f "gold_analysis_summary.json" ]; then
          echo "محتوى gold_analysis_summary.json:"
          cat gold_analysis_summary.json
          
          # التحقق من وجود بيانات صحيحة
          python -c "
import json
with open('gold_analysis_summary.json', 'r') as f:
    data = json.load(f)
    if data.get('price'):
        print(f'✅ السعر: \${data[\"price\"]}')
        print(f'✅ الإشارة: {data.get(\"signal\", \"N/A\")}')
        print(f'✅ الثقة: {data.get(\"confidence\", \"N/A\")}')
    else:
        print('⚠️ لا توجد بيانات كاملة')
          "
        else
          echo "⚠️ لم يتم إنشاء ملف النتائج"
        fi
        
    - name: Configure Git
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "Gold Analysis Bot V3"
        
    - name: Commit and Push Results
      run: |
        # سحب آخر التغييرات
        git pull origin main --no-rebase || true
        
        # إضافة الملفات
        git add gold_analysis_v3.json gold_analysis_summary.json analysis_history.db *.pkl || true
        
        # إنشاء commit
        if ! git diff --staged --quiet; then
          git commit -m "🔄 Update gold analysis V3 - $(date +'%Y-%m-%d %H:%M UTC')"
          
          # محاولة الدفع
          git push origin main || {
            echo "⚠️ فشل الدفع الأول، محاولة مرة أخرى..."
            git pull origin main --no-rebase
            git push origin main
          }
        else
          echo "لا توجد تغييرات للحفظ"
        fi
