name: 🏆 Gold Analysis Pro

on:
  schedule:
    # تشغيل يومي
    - cron: '30 13 * * 1-5'  # 1:30 PM UTC
    - cron: '0 21 * * 1-5'   # 9:00 PM UTC
    
  # تشغيل يدوي
  workflow_dispatch:
  
  # تشغيل عند push للاختبار
  push:
    branches: [ main ]
    paths: ['**.py']

env:
  NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
  PYTHONUNBUFFERED: 1

jobs:
  gold-analysis:
    name: 📊 Gold Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: 🔍 Checkout Code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install Dependencies  
      run: |
        echo "Installing dependencies..."
        pip install --upgrade pip
        pip install yfinance pandas numpy requests transformers torch pandas-ta pytz --index-url https://download.pytorch.org/whl/cpu
        echo "✅ Dependencies installed"

    - name: 🤖 Pre-load Model
      run: |
        python -c "
        try:
            from transformers import pipeline
            pipeline('sentiment-analysis', model='ProsusAI/finbert')
            print('✅ Model loaded')
        except Exception as e:
            print(f'⚠️ Model warning: {e}')
        " || echo "Continuing without model..."

    - name: 🚀 Run Analysis
      run: |
        echo "🚀 Starting analysis..."
        python main_analyzer.py
        echo "✅ Analysis completed"

    - name: 📊 Check Results
      run: |
        if [ -f "gold_analysis_pro.json" ]; then
          echo "✅ Results file created"
          python -c "
          import json
          with open('gold_analysis_pro.json', 'r') as f:
              data = json.load(f)
          print(f'Signal: {data[\"signal\"]} ({data[\"signal_strength\"]})')
          print(f'Score: {data[\"total_score\"]}')
          print(f'Price: \${data[\"market_data\"][\"gold_price\"]}')
          "
        else
          echo "❌ Results file not found"
          exit 1
        fi

    - name: 📝 Create Report
      run: |
        python -c "
        import json
        from datetime import datetime
        
        with open('gold_analysis_pro.json', 'r') as f:
            data = json.load(f)
        
        report = f'''# 📊 Gold Analysis - {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}

## 🎯 Trading Signal
**{data['signal']}** - {data['signal_strength']}
- **Score**: {data['total_score']:.3f}
- **Confidence**: {data['confidence_level']:.1%}

## 💰 Market Data  
- **Gold Price**: \${data['market_data']['gold_price']:,.2f}
- **DXY**: {data['market_data']['dxy']:.2f}
- **VIX**: {data['market_data']['vix']:.2f}

## 🔧 Risk Management
- **Stop Loss**: \${data['risk_management']['stop_loss_price']:.2f}
- **Take Profit**: \${data['risk_management']['take_profit_price']:.2f}
- **Position Size**: {data['risk_management']['position_size_percent']:.1f}%

## 📈 Components
| Component | Score |
|-----------|-------|'''
        
        for comp, score in data['score_components'].items():
            report += f'\\n| {comp.replace(\"_\", \" \").title()} | {score:.3f} |'
        
        report += f'''

## 🔬 Backtest
- **Return**: {data['backtest_results']['total_return_percent']:.2f}%
- **Sharpe**: {data['backtest_results']['sharpe_ratio']:.2f}
- **Max DD**: {data['backtest_results']['max_drawdown_percent']:.2f}%
- **Win Rate**: {data['backtest_results']['win_rate_percent']:.1f}%

## 📰 News
- **Status**: {data['news_analysis']['status']}
- **Articles**: {len(data['news_analysis'].get('headlines', []))}
- **Sentiment**: {data['news_analysis'].get('news_score', 0):.3f}

---
*Updated: {data['timestamp_utc']}*
'''
        
        with open('README.md', 'w') as f:
            f.write(report)
        print('✅ Report created')
        "

    - name: 💾 Commit Results
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Gold Analysis Bot"
        
        git add .
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          SIGNAL=$(python -c "
          import json
          try:
              with open('gold_analysis_pro.json', 'r') as f:
                  data = json.load(f)
              print(f'{data[\"signal\"]} ({data[\"total_score\"]:.2f})')
          except:
              print('Analysis Update')
          ")
          
          git commit -m "🤖 Gold Analysis: $SIGNAL - $(date -u '+%Y-%m-%d %H:%M UTC')"
          git push
          echo "✅ Results committed and pushed"
        fi

    - name: 📤 Upload Files (Fixed)
      if: always()
      uses: actions/upload-artifact@v4  # ← هنا الإصلاح الرئيسي
      with:
        name: gold-analysis-${{ github.run_number }}
        path: |
          *.json
          *.db
          *.log
          README.md
        retention-days: 30

    - name: 🚨 On Failure
      if: failure()
      run: |
        echo "❌ Analysis failed!"
        echo "System info:"
        df -h
        free -h
        
        echo "Files created:"
        ls -la
        
        if [ -f "gold_analysis_pro.log" ]; then
          echo "Last 10 log lines:"
          tail -10 gold_analysis_pro.log
        fi
        
        echo "Python packages:"
        pip list | grep -E "(yfinance|pandas|transformers)"

    - name: ✅ Success
      if: success()
      run: |
        echo "🎉 Gold Analysis completed successfully!"
        echo "📁 Files created:"
        ls -la *.json *.db *.md 2>/dev/null | head -10
        
        echo "🔗 Check the repository for updated files!"