name: 🏆 Enhanced Gold Analysis V3.0

on:
  schedule:
    # تشغيل كل 4 ساعات في أوقات السوق النشطة
    - cron: '0 6,10,14,18,22 * * 1-5'  # أيام العمل
    - cron: '0 12 * * 0,6'              # عطلة نهاية الأسبوع
  
  # تشغيل يدوي
  workflow_dispatch:
    inputs:
      analysis_type:
        description: 'نوع التحليل'
        required: false
        default: 'full'
        type: choice
        options:
        - full
        - quick
        - ml_only

env:
  # متغيرات البيئة العامة
  PYTHONPATH: ${{ github.workspace }}
  TZ: 'UTC'

jobs:
  enhanced-gold-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      
    steps:
    - name: 📥 استنساخ المستودع
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: 🐍 إعداد Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: ⚡ تحديث pip وتثبيت المكتبات
      run: |
        echo "🚀 تحديث pip..."
        python -m pip install --upgrade pip setuptools wheel
        
        echo "📦 تثبيت المكتبات المطلوبة..."
        pip install -r requirements.txt --timeout 300 --retries 3
        
        echo "📋 قائمة المكتبات المثبتة:"
        pip list | grep -E "(yfinance|pandas|numpy|scikit|xgboost)"
    
    - name: 🔧 فحص البيئة
      run: |
        echo "🌍 المنطقة الزمنية: $(date)"
        echo "🐍 إصدار Python: $(python --version)"
        echo "💾 مساحة القرص: $(df -h . | tail -1)"
        echo "🧠 الذاكرة: $(free -h)"
    
    - name: 🚀 تشغيل التحليل الاحترافي المحسن
      env:
        NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
        FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
        ANALYSIS_TYPE: ${{ github.event.inputs.analysis_type || 'full' }}
      run: |
        echo "🎯 نوع التحليل: $ANALYSIS_TYPE"
        
        echo "📁 الملفات المتاحة:"
        ls -la *.py 2>/dev/null || echo "⚠️ لا توجد ملفات Python"
        
        # تجربة تشغيل الملفات المتاحة بالترتيب
        if [ -f "simple_gold_analyzer.py" ]; then
          echo "✅ تشغيل simple_gold_analyzer.py"
          python simple_gold_analyzer.py
        elif [ -f "enhanced_gold_analyzer_github.py" ]; then
          echo "✅ تشغيل enhanced_gold_analyzer_github.py"
          python enhanced_gold_analyzer_github.py
        elif [ -f "gold_analyzer.py" ]; then
          echo "✅ تشغيل gold_analyzer.py"
          python gold_analyzer.py
        else
          echo "❌ لم يتم العثور على أي سكربت قابل للتنفيذ"
          echo "📁 جميع الملفات في المجلد:"
          ls -la
          
          # إنشاء سكربت بسيط كبديل طوارئ
          echo "🔄 إنشاء سكربت بسيط بديل..."
          cat > temp_analyzer.py << 'EOF'
#!/usr/bin/env python3
import yfinance as yf
import pandas as pd
import json
from datetime import datetime

def simple_gold_analysis():
    try:
        print("📊 تحليل الذهب البسيط...")
        
        # جلب بيانات الذهب
        gold_data = yf.download('GC=F', period='1mo', progress=False)
        
        if gold_data.empty:
            raise ValueError("فشل في جلب بيانات الذهب")
        
        current_price = gold_data['Close'].iloc[-1]
        prev_price = gold_data['Close'].iloc[-2]
        change = current_price - prev_price
        change_pct = (change / prev_price) * 100
        
        # حساب RSI بسيط
        delta = gold_data['Close'].diff()
        gain = delta.where(delta > 0, 0).rolling(14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(14).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        current_rsi = rsi.iloc[-1]
        
        # تحديد الإشارة
        if current_rsi < 30:
            signal = "Buy - Oversold"
        elif current_rsi > 70:
            signal = "Sell - Overbought"  
        elif change_pct > 1:
            signal = "Strong Bullish"
        elif change_pct < -1:
            signal = "Strong Bearish"
        else:
            signal = "Neutral"
        
        result = {
            'timestamp': datetime.now().isoformat(),
            'current_price': round(float(current_price), 2),
            'change': round(float(change), 2),
            'change_pct': round(float(change_pct), 2),
            'rsi': round(float(current_rsi), 1),
            'signal': signal,
            'status': 'success'
        }
        
        # حفظ النتائج
        with open('gold_analysis_emergency.json', 'w') as f:
            json.dump(result, f, indent=2)
        
        print(f"✅ تم التحليل بنجاح")
        print(f"💰 سعر الذهب: ${current_price:.2f}")
        print(f"📈 التغيير: {change_pct:.2f}%")
        print(f"📊 RSI: {current_rsi:.1f}")
        print(f"🎯 الإشارة: {signal}")
        
        return result
        
    except Exception as e:
        error_result = {
            'timestamp': datetime.now().isoformat(),
            'error': str(e),
            'status': 'error'
        }
        
        with open('gold_analysis_error.json', 'w') as f:
            json.dump(error_result, f, indent=2)
        
        print(f"❌ خطأ: {e}")
        return error_result

if __name__ == "__main__":
    simple_gold_analysis()
EOF
          
          python temp_analyzer.py
        fi
        
        echo "✅ تم إكمال التحليل"
    
    - name: 📊 معالجة النتائج
      if: always()
      run: |
        echo "📋 ملفات النتائج المتاحة:"
        ls -la *.json *.txt 2>/dev/null || echo "لا توجد ملفات نتائج"
        
        # إنشاء ملخص سريع
        if [ -f "gold_summary_"*.json ]; then
          echo "📈 الملخص السريع:"
          cat gold_summary_*.json | head -20
        fi
    
    - name: 💾 رفع النتائج كـ Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gold-analysis-results-${{ github.run_number }}
        path: |
          *.json
          *.txt
          *.pkl
          *.db
        retention-days: 30
        if-no-files-found: warn
    
    - name: 📢 إنشاء Issue مع التقرير المفصل
      if: success()
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            // البحث عن ملفات التقرير
            const files = fs.readdirSync('.');
            const summaryFile = files.find(f => f.startsWith('gold_summary_') && f.endsWith('.json'));
            const analysisFile = files.find(f => f.startsWith('gold_analysis_v3_') && f.endsWith('.json'));
            
            let issueBody = `## 🏆 تقرير التحليل الاحترافي للذهب V3.0\n\n`;
            issueBody += `**⏰ وقت التحليل:** ${new Date().toISOString()}\n`;
            issueBody += `**🔄 رقم التشغيل:** #${context.runNumber}\n`;
            issueBody += `**⚙️ نوع التحليل:** ${process.env.ANALYSIS_TYPE || 'full'}\n\n`;
            
            // إضافة الملخص السريع
            if (summaryFile) {
              try {
                const summary = JSON.parse(fs.readFileSync(summaryFile, 'utf8'));
                issueBody += `### 📊 الملخص السريع\n\n`;
                issueBody += `- **الإشارة:** ${summary.signal || 'N/A'}\n`;
                issueBody += `- **الثقة:** ${summary.confidence || 'N/A'}\n`;
                issueBody += `- **السعر:** $${summary.price || 'N/A'}\n`;
                issueBody += `- **التوصية:** ${summary.recommendation || 'N/A'}\n\n`;
              } catch (e) {
                console.log('خطأ في قراءة الملخص:', e.message);
              }
            }
            
            // إضافة رابط للنتائج الكاملة
            issueBody += `### 📁 النتائج الكاملة\n\n`;
            issueBody += `🔗 [تحميل جميع النتائج](${context.payload.repository.html_url}/actions/runs/${context.runId})\n\n`;
            
            // إضافة تفاصيل تقنية
            issueBody += `### 🔧 تفاصيل تقنية\n\n`;
            issueBody += `- **المكتبات:** yfinance, scikit-learn, xgboost\n`;
            issueBody += `- **الميزات:** تعلم آلي, تحليل متعدد الأطر, تحليل أخبار\n`;
            issueBody += `- **البيئة:** GitHub Actions Ubuntu Latest\n\n`;
            
            // تحديد التسميات
            const labels = ['gold-analysis', 'automated'];
            if (summaryFile) {
              const summary = JSON.parse(fs.readFileSync(summaryFile, 'utf8'));
              if (summary.signal && summary.signal.includes('Buy')) {
                labels.push('bullish');
              } else if (summary.signal && summary.signal.includes('Sell')) {
                labels.push('bearish');
              }
            }
            
            issueBody += `---\n*🤖 تم إنشاؤه تلقائياً بواسطة Enhanced Gold Analyzer V3.0*`;
            
            // إنشاء Issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📊 تحليل الذهب V3.0 - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: labels
            });
            
            console.log('✅ تم إنشاء Issue بنجاح');
            
          } catch (error) {
            console.log('⚠️ خطأ في إنشاء Issue:', error.message);
            
            // إنشاء issue مبسط في حالة الخطأ
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `⚠️ تحليل الذهب - ${new Date().toISOString().split('T')[0]}`,
              body: `## تحليل الذهب الاحترافي\n\n❌ حدث خطأ في معالجة النتائج\n\n**الخطأ:** ${error.message}\n\n🔗 [عرض السجلات](${context.payload.repository.html_url}/actions/runs/${context.runId})`,
              labels: ['gold-analysis', 'error']
            });
          }
    
    - name: 🧹 تنظيف الملفات المؤقتة
      if: always()
      run: |
        # الاحتفاظ بالملفات المهمة فقط
        find . -name "*.pyc" -delete 2>/dev/null || true
        find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        
        echo "🧹 تم التنظيف"
